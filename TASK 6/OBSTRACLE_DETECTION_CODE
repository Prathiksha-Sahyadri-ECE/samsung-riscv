#include "ch32v00x.h"
#include "debug.h"

// Define Ultrasonic Sensor Pins
#define TRIG_PIN    PC4
#define ECHO_PIN    PC5

// Define Buzzer Pin
#define BUZZER_PIN  PC7

void delay_us(uint32_t us) {
    for (uint32_t i = 0; i < (SystemCoreClock / 8000000) * us; i++) {
        __NOP();  // No operation (wastes time for delay)
    }
}

void setup() {
    // Enable GPIOC clock
    RCC->APB2PCENR |= RCC_APB2Periph_GPIOC;

    // Configure Trig pin as Output
    GPIOC->CFGLR &= ~(0xF << (4 * (TRIG_PIN % 8)));  
    GPIOC->CFGLR |= (0x3 << (4 * (TRIG_PIN % 8)));  

    // Configure Echo pin as Input
    GPIOC->CFGLR &= ~(0xF << (4 * (ECHO_PIN % 8)));  
    GPIOC->CFGLR |= (0x4 << (4 * (ECHO_PIN % 8)));  

    // Configure Buzzer pin as Output
    GPIOC->CFGLR &= ~(0xF << (4 * (BUZZER_PIN % 8)));  
    GPIOC->CFGLR |= (0x3 << (4 * (BUZZER_PIN % 8)));  

    // Ensure Trig is low initially
    GPIOC->OUTDR &= ~(1 << TRIG_PIN);

    // Turn off Buzzer initially
    GPIOC->OUTDR &= ~(1 << BUZZER_PIN);
}

uint32_t getDistance() {
    uint32_t start_time, stop_time, duration;

    // Send Trigger Pulse (10us)
    GPIOC->OUTDR |= (1 << TRIG_PIN);
    delay_us(10);
    GPIOC->OUTDR &= ~(1 << TRIG_PIN);

    // Wait for Echo to go HIGH
    while (!(GPIOC->INDR & (1 << ECHO_PIN)));  
    start_time = SysTick->CNT;

    // Wait for Echo to go LOW
    while (GPIOC->INDR & (1 << ECHO_PIN));  
    stop_time = SysTick->CNT;

    // Calculate duration
    duration = stop_time - start_time;

    // Convert to distance (in cm) using speed of sound (343m/s)
    return (duration * 0.0343) / 2;
}

void loop() {
    uint32_t distance = getDistance();

    if (distance > 0 && distance <= 10) {
        GPIOC->OUTDR |= (1 << BUZZER_PIN);  // Turn ON Buzzer if object is close
    } else {
        GPIOC->OUTDR &= ~(1 << BUZZER_PIN); // Turn OFF Buzzer
    }
}

int main() {
    setup();
    while (1) {
        loop();
    }
}
